
@{
    ViewBag.Title = "Register";
    Layout = "~/Views/Shared/_UserLoginLayout.cshtml";
}

<style type="text/css">
    .lang-btn {
        background-color: #fff;
    }

        .lang-btn.checked {
            background-color: #2D4373;
            color: #ffffff;
        }

    .profile-img {
        width: inherit;
        height: auto;
        margin: 0 auto 20px;
        display: block;
        padding: 20px;
        -moz-border-radius: 5px;
        -webkit-border-radius: 5px;
        border-radius: 5px;
        background: #fff;
        -webkit-box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.1);
        -moz-box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.1);
        box-shadow: 0px 0px 10px 3px rgba(0,0,0,0.1);
    }

    .btn-group.fullwidth {
        display: flex;
    }

    .fullwidth .btn {
        flex: 1;
    }

</style>


<div class="registration-page" ng-controller="registerCtrl">
    <header class="sports-background-photo_header">
        <a href="/" class="sports-background-photo__logo">
            <img src="~/Content/Images/logo.png" />
        </a>

        <div class="sports-right-button">
            @Html.ActionLink("Home", "Index", "Home")
        </div>
    </header>
	<section class="registration-form-section">
		<div class="col-md-8 col-md-offset-2 col-sm-8 col-sm-offset-2 col-xs-10 col-xs-offset-1">
			<div class="well row">
				<h1 class="login-Screen-header">
					<span class="main-action">
						Register
					</span>
					or
					<span class="secondary-action">
						<a href="/Login?returnUrl=@ViewBag.returnUrl" class="">Login</a>
					</span>
				</h1>

				<div>
					<form name="form" class="mt" novalidate="">
						<div class="row">
							<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
								<div class="form-group" show-errors>
									<label>
										Name <b class="starStyle">*</b>
									</label>
									<input class="form-control mb" name="Name" type="text"
										   ng-model="Name" required />
									<p class="help-block" ng-if="form.Name.$error.required">
										Name is Required
									</p>
								</div>
							</div>
							<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
								<div class="form-group" show-errors>
									<label>
										Email Address <b class="starStyle">*</b>
									</label>
									<input class="form-control mb" name="email" type="email" ng-model="Email" required />
									<p class="help-block" ng-if="form.email.$error.required">
										Email Address is Required
									</p>
									<p class="help-block" ng-if="form.email.$error.email">
										Email is not valid
									</p>
								</div>
							</div>
						</div>
						<div class="row">
							<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
								<div class="form-group" show-errors>
									<label>
										Mobile Number <b class="starStyle">*</b>
									</label>
									<input class="form-control mb" name="Mobile" type="number"
										   ng-model="Mobile" required />
									<p class="help-block" ng-if="form.Phone.$error.required">
										Mobile Number id Required
									</p>
								</div>
							</div>
                            <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
                                <div style="color:orangered;margin-top:25px;">
                                    This phone number will be used to contact you if you are selected winner. Make sure the number is owned by you.

                                </div>
                            </div>
						</div>
						<div class="row">
							<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
								<div class="form-group" show-errors>
									<label>
										Password <b class="starStyle">*</b>
									</label>
									<input name="Password" class="form-control mb" type="password" ng-model="Password"
										   ng-pattern="@("/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/")" required />
									<p class="help-block" ng-if="form.Password.$error.required">
										Password id Required
									</p>
									<p class="help-block" ng-messages="form.Password.$error">
										<span ng-message="pattern">
											Password should be atleast 8 characters long
											and should contain one number,one character and one special
											character
										</span>
									</p>
								</div>
							</div>
							<div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
								<div class="form-group" show-errors>
									<label>
										Confirm Password <b class="starStyle">*</b>
									</label>
									<input name="ConfirmPassword" class="form-control mb" type="password" ng-model="ConfirmPassword"
										   ng-pattern="@("/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/")" required />
									<p class="help-block" ng-if="form.ConfirmPassword.$error.required">
										Confirm Password id Required
									</p>
									<p class="help-block" ng-messages="form.ConfirmPassword.$error">
										<span ng-message="pattern">
											Password should be atleast 8 characters long
											and should contain one number,one character and one special
											character
										</span>
									</p>
								</div>
							</div>
						</div>

						<button class="btn btn-primary btn-block login-btn" ng-click="userRegister()" style="height: 45px; background: #707bd6;">Register</button>
					</form>
				</div>
			</div>
		</div>
	</section>

    

    <modal title='Success' visible="showModalforSearch">
        <alert ng-repeat="alert in alerts" type="alert.type" close="closeAlert($index)">{{alert.msg}}</alert>
        <form name="form.update" role="form">
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <span>{{messageModalObj.message}}</span>
                </div>
            </div>
        </form>
    </modal>


</div>

@section scripts{
    <script type="text/javascript">
        app.factory('registerService',
            [
                '$http', function($http) {
                    return {
                        register: function (registerObj, timeZoneOffset, language) {
                            var parameters = { registerObj: registerObj, timeZoneOffset: timeZoneOffset, language: language };
                            return $http({
                                url: '/Account/SaveRegister',
                                method: 'POST',
                                dataType: "json",
                                data: JSON.stringify(parameters)
                            });
                        },

                        saveMyTeam: function (myTeam, tournamentId, userId) {
                            var parameters = { myTeam: myTeam, tournamentId: tournamentId, userId: userId };
                            return $http({
                                url: '/Team/CreateUserTeam',
                                method: 'POST',
                                data: JSON.stringify(parameters)
                            });
                        },

                        saveMyMatchTeam: function (myTeam, matchId, tournamentId, userId) {
                            var params = {
                                myTeam: myTeam,
                                matchId: matchId,
                                tournamentId: tournamentId,
                                userId: userId
                            }
                            return $http({
                                url: '/Team/CreateUserMatchTeam',
                                method: 'POST',
                                data: JSON.stringify(params)
                            });
                        },

                        saveLeagueJoinCheck: function (myleague) {
                            return $http({
                                url: '/MyLeague/LeagueJoinCheck',
                                method: 'POST',
                                data: myleague
                            });
                        }
                    };
                }
            ]);

        app.controller('registerCtrl',
            function($scope, registerService, $timeout, $ngBootbox) {

                $scope.messageModalObj = {};
                $scope.showModalforSearch = false;
                var dateObj = new Date();
                var timeZoneOffset = -(dateObj.getTimezoneOffset());
               
                $scope.backToTeamCreation = function () {
                    window.location.href = "/User/CreateUserTeam";
                }

                $scope.userRegister = function() {
                    $scope.$broadcast('show-errors-check-validity');
                    if ($scope.form.$valid) {
                        var email = $scope.Email;
                        if (email ) {
                            var registerObj = {};
                            registerObj["Name"] = $scope.Name;
                            registerObj["Email"] = $scope.Email;
                            registerObj["Mobile"] = $scope.Mobile;
                            registerObj["Password"] = $scope.Password;

                            var dateObj = new Date();
                            var timeZoneOffset = -(dateObj.getTimezoneOffset());
                            var language = $scope.language;

                            registerService.register(registerObj, timeZoneOffset, language)
                                .then(function (response) {
                                    if (response.data.isSuccess === true) {
                                        if (localStorage.userTeam) {
                                            var team = JSON.parse(localStorage.userTeam);
                                            if (team != null) {
                                                if (team["IsMatchTeam"] == true)
                                                    saveMatchTeam(team, team["MatchScheduleId"], team["TournamentId"], response.data.userId);
                                                else
                                                    saveTeam(team, team["TournamentId"], response.data.userId);
                                            }
                                        }
                                        localStorage.removeItem("userTeam");

                                        if (localStorage.leagueInfo != null) {
                                            var myleague = JSON.parse(localStorage.leagueInfo);
                                            registerService.saveLeagueJoinCheck(myleague)
                                                .then(function onSuccess(response) {

                                                })
                                                .catch(function onError(response) {
                                                    $ngBootbox.alert(" Please try again later");
                                                });
                                        }

                                        window.location = "/User/Dashboard";                                      
                                    }
                                    else {
                                        $ngBootbox.alert(response.data.message);
                                    }
                                });
                        }
                    }
                };

                //========== save User Team ========//
                function saveTeam(team, tournamentId, userId) {
                    registerService.saveMyTeam(team, tournamentId, userId)
                        .then(function onSuccess(response) {
                            if (response.data.isSuccess) {
                                if (!response.data.NeedToPay) {
                                    window.location.href = "/User/Dashboard";
                                } else {
                                    window.location.href = "/Payment/" + tournamentId;
                                }
                            } else {
                                $ngBootbox.alert("Failed to save your Information, Please try again later");
                            }
                        })
                        .catch(function onError(response) {
                            $ngBootbox.alert("Failed to save your Information, Please try again later");
                        });
                }

                function saveMatchTeam(team, matchId, tournamentId, userId) {
                    registerService.saveMyMatchTeam(team, matchId, tournamentId, userId)
                        .then(function onSuccess(response) {
                            if (response.data.isSuccess) {
                                if (!response.data.NeedToPay) {
                                    window.location.href = "/User/Dashboard";
                                } else {
                                    window.location.href = "/MatchPayment/" + matchId + "/" + tournamentId;
                                }
                            } else {
                                $ngBootbox.alert("Failed to save your Information, Please try again later");
                            }
                        })
                        .catch(function onError(response) {
                            $ngBootbox.alert("Failed to save your Information, Please try again later");
                        });
                }
            });
    </script>
}