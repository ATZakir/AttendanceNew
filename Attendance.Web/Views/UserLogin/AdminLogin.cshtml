@{
	ViewBag.Title = "Home Page";
	Layout = "~/Views/Shared/_UserLoginLayout.cshtml";
}

<style type="text/css">
	.lang-btn {
		background-color: #fff;
	}

		.lang-btn.checked {
			background-color: #2D4373;
			color: #ffffff;
		}

	.btn-group.fullwidth {
		display: flex;
	}

	.fullwidth .btn {
		flex: 1;
	}
</style>

<link href="~/Content/login.css" rel="stylesheet" />


<div class="container h-100" ng-controller="loginCtrl">
	<div class="row">
		<div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
			<div class="card card-signin my-5">
				<div class="card-body">
                    <h5 class="card-title text-center">@Resources.ResourceCommon.LblSignIn</h5>
					<form name="form" class="mt" novalidate="">
						<select id="drpdownLanguage" class="dropdownclass" name="drpdownLanguage" data-ng-model="language" ng-hide="true">

							<option value="en">
								@Resources.ResourceCommon.LblEnglish
							</option>

							<option value="bn">
								@Resources.ResourceCommon.LblBangla
							</option>

						</select>


						<div class="form-group" show-errors>
							<label class="text-uppercase text-sm">
								@Resources.ResourceCommon.LblUserName
							</label>
							<input class="form-control mb" name="LoginName" type="text" placeholder="Username" ng-model="LoginName" autofocus required />
							<b class="help-block" ng-if="form.LoginName.$error.required">
								@string.Format(Resources.ResourceCommon.VMsgRequired_Name, @Resources.ResourceCommon.LblUserName)
							</b>
						</div>


						<div class="form-group" show-errors>

							<label class="text-uppercase text-sm">
								@Resources.ResourceCommon.LblPassword
							</label>
							<input name="Password" class="form-control mb" type="password" placeholder="Password" ng-model="Password" required />
							<b class="help-block" ng-if="form.Password.$error.required">
								@string.Format(Resources.ResourceCommon.VMsgRequired_Name, @Resources.ResourceCommon.LblPassword)
							</b>
						</div>

						<div class="form-group">
							<label class="text-uppercase text-sm">
								@Resources.ResourceCommon.LblLanguage
							</label>
							<div class="btn-group w-100" role="group" style="padding-bottom: 10px;">
								<button type="button" class="btn btn-outline-secondary lang-btn" style="padding-top: 10px;"
								        ng-click="toggleResponseValue('en')"
								        ng-class="{'checked':language == 'en'}">
									<img src="~/Content/Images/Eng.png" width="auto" height="20" style="display: inline-block;" /> &nbsp;&nbsp;
									@Resources.ResourceCommon.LblEnglish
								</button>
								<button type="button" class="btn btn-outline-secondary lang-btn" style="padding-top: 10px;"
								        ng-click="toggleResponseValue('bn')"
								        ng-class="{'checked':language == 'bn'}">
									<img src="~/Content/Images/bn.png" width="auto" height="20" style="display: inline-block;" /> &nbsp;&nbsp;
									@Resources.ResourceCommon.LblBangla
								</button>
							</div>
						</div>


						<button class="btn btn-primary btn-block" ng-click="userLogin()">
							@Resources.ResourceCommon.LblLogin
						</button>

					</form>
				</div>
			</div>
		</div>
	</div>

	<modal title='@Resources.ResourceCommon.MsgHeaderSuccess' visible="showModalforSearch">
		<alert ng-repeat="alert in alerts" type="alert.type" close="closeAlert($index)">{{alert.msg}}</alert>
		<form name="form.update" role="form">
			<div class="row">
				<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
					<span>{{messageModalObj.message}}</span>
				</div>
			</div>
		</form>
	</modal>
</div>



@section scripts
{
	<script type="text/javascript">


    $('.btn-toggle').click(function () {
        $(this).find('.btn').toggleClass('active');

        if ($(this).find('.btn-primary').size() > 0) {
            $(this).find('.btn').toggleClass('btn-primary');
        }
        if ($(this).find('.btn-danger').size() > 0) {
            $(this).find('.btn').toggleClass('btn-danger');
        }
        if ($(this).find('.btn-success').size() > 0) {
            $(this).find('.btn').toggleClass('btn-success');
        }
        if ($(this).find('.btn-info').size() > 0) {
            $(this).find('.btn').toggleClass('btn-info');
        }

        $(this).find('.btn').toggleClass('btn-default');

    });

    var myEl = angular.element(document.querySelector('#body'));
    myEl.addClass('login-background');

    $(".input").focusin(function () {
        $(this).find("span").animate({ "opacity": "0" }, 200);
    });

    $(".input").focusout(function () {
        $(this).find("span").animate({ "opacity": "1" }, 300);
    });

    $(".login").submit(function () {
        $(this).find(".submit i").removeAttr('class').addClass("fa fa-check").css({ "color": "#fff" });
        $(".submit").css({ "background": "#2ecc71", "border-color": "#2ecc71" });
        $(".feedback").show().animate({ "opacity": "1", "bottom": "-80px" }, 400);
        $("input").css({ "border-color": "#2ecc71" });
        return false;
    });

    // var ip = '<%= Request.UserHostAddress %>';

    app.factory('loginService', ['$http', function ($http) {
        return {
            checkLogin: function (user, timeZoneOffset, language) {
                var parameters = { user: user, timeZoneOffset: timeZoneOffset, language: language };
                return $http({
	                url: '/Account/CheckLogin',
	                method: 'POST',
	                dataType: "json",
	                data: JSON.stringify(parameters),
                });
            },
            SetTimeZoneOffset: function (timeZoneOffset) {
                var parameters = { timeZoneOffset: timeZoneOffset };
                return $http({
	                url: '/Account/SetTimeZoneOffset',
	                method: 'POST',
	                dataType: "json",
	                data: JSON.stringify(parameters)
                });
            }
        };
	}]);

    app.controller('loginCtrl', function ($scope, $http, $location, loginService, $timeout, $log, $ngBootbox, blockUI) {

        $scope.language = "en";

        $scope.showModalforLogIn = false;
        $scope.Roles = {};

        $scope.messageModalObj = {};
        $scope.showModalforSearch = false;
        if ('@ViewBag.RedirectMessage' != '') {
            $scope.showModalforSearch = true;
            $scope.messageModalObj.message = '@ViewBag.RedirectMessage';
            $timeout(function () { $scope.showModalforSearch = false; }, 3000);
        }

        $scope.toggleResponseValue = function (lng) {
            $scope.language = lng;
 
        }

		$scope.userLogin = function () {
			$scope.$broadcast('show-errors-check-validity');
            if ($scope.form.$valid) {
                var login = {};
                login["LoginName"] = $scope.LoginName;
                login["Password"] = $scope.Password;

                var dateObj = new Date();
                var timeZoneOffset = -(dateObj.getTimezoneOffset());
                var language = $scope.language;
                loginService.checkLogin(login, timeZoneOffset, language)
                    .then(function onSuccess(response) {
	                    if (response.data.isSuccess) {
		                    if (response.data.RoleId > 0) {
                                var roleId = response.data.RoleId;
                                var can = response.data.IsAdmin;
                                if (can) {
									window.location = "/Admin/Index";
//									window.location = "/AdminDashboard/Homepage";
								} else {
									$ngBootbox.alert('Permission Denied! You are not Admin');
								}
		                    } else {
								
								$ngBootbox.alert('Wrong user id or password!');
		                    }
						} else {

		                    $ngBootbox.alert('Wrong user id or password!'); 
//		                    $scope.showModalforSearch = true;
//		                    $scope.messageModalObj.message = 'Wrong user id or password!';
//		                    $timeout(function () { $scope.showModalforSearch = false; }, 3000);
	                    }
                    });
            }
        };

        loadTimeZone();
        function loadTimeZone() {
            var dateObj = new Date();
            var timeZoneOffset = -(dateObj.getTimezoneOffset());
            loginService.SetTimeZoneOffset(timeZoneOffset)
                .then(function onSuccess(response) {
                    //$scope.healthTipList = response.data;
                });
        }
    });</script>
}


